import os
import vosk
import pyaudio
import json
import pyttsx3
engine = pyttsx3.init()
engine.setProperty('voice', 'HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Speech\\Voices\\Tokens\\TTS_MS_RU-RU_IRINA_11.0')



# Проверьте, существует ли модель
if not os.path.exists("model"):
    print("Пожалуйста, скачайте модель с https://alphacephei.com/vosk/models и распакуйте её в текущий каталог.")
    exit()

# Загрузка модели
model = vosk.Model("model")



# Настройка аудиопотока
audio = pyaudio.PyAudio()
stream = audio.open(format=pyaudio.paInt16, channels=1, rate=16000, input=True, frames_per_buffer=8000)
stream.start_stream()

rec = vosk.KaldiRecognizer(model, 16000)

responses = {"привет":"Здравствуйте", "пока":"Досвидания"}

def speech(x):
    response = responses[x]
    print(response)
    stream.stop_stream()
    engine.say(response)
    engine.runAndWait()
    stream.start_stream()

print("Начало распознавания... Говорите в микрофон.")


try:
    while True:
        data = stream.read(4000, exception_on_overflow=False)
        if len(data) == 0:
            break
        if rec.AcceptWaveform(data):
            result = json.loads(rec.Result())
            print(f"Распознанный текст: {result['text']}")

            if result['text'] == "вася":
                stream.stop_stream()
                engine.say("Я внимательно слушаю")
                engine.runAndWait()
                stream.start_stream()
                while True:
                    data = stream.read(4000, exception_on_overflow=False)
                    if len(data) == 0:
                        break
                    if rec.AcceptWaveform(data):
                        result = json.loads(rec.Result())
                        print(f"Распознанный текст: {result['text']}")
                        if result['text'] == "привет":
                            stream.stop_stream()
                            engine.say("Привет")
                            engine.runAndWait()
                            stream.start_stream()
                        if result['text'] == "стоп":
                            stream.stop_stream()
                            engine.say("Я перестал тебя слушать")
                            engine.runAndWait()
                            stream.start_stream()
                            break

            # if result['text'] in responses:
            #     speech(result['text'])
            # else:
            #     print("Я тебя не понимаю")

except KeyboardInterrupt:
    print("Распознавание завершено.")
finally:
    stream.stop_stream()
    stream.close()
    audio.terminate()
